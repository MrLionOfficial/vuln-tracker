import React, { useState, useMemo } from 'react';
import { useProject } from '../../../components/ui/ProjectContextProvider';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';
import Input from '../../../components/ui/Input';
import Select from '../../../components/ui/Select';

const VulnerabilityList = ({ selectedVulnerability, onSelectVulnerability, onCreateNew }) => {
  const { currentProject } = useProject();
  const [searchTerm, setSearchTerm] = useState('');
  const [filterSeverity, setFilterSeverity] = useState('');
  const [filterStatus, setFilterStatus] = useState('');

  // Mock vulnerability data
  const vulnerabilities = [
    {
      id: 1,
      name: "SQL Injection in Login Form",
      severity: "critical",
      owaspCategory: "A03:2021 – Injection",
      status: "verified",
      createdDate: "2025-01-20",
      lastModified: "2025-01-25",
      affectedHosts: ["app.techcorp.com", "admin.techcorp.com"],
      description: "SQL injection vulnerability found in the login authentication mechanism allowing unauthorized database access."
    },
    {
      id: 2,
      name: "Cross-Site Scripting (XSS) in User Profile",
      severity: "high",
      owaspCategory: "A03:2021 – Injection",
      status: "draft",
      createdDate: "2025-01-22",
      lastModified: "2025-01-26",
      affectedHosts: ["profile.techcorp.com"],
      description: "Stored XSS vulnerability in user profile fields allowing malicious script execution."
    },
    {
      id: 3,
      name: "Insecure Direct Object Reference",
      severity: "medium",
      owaspCategory: "A01:2021 – Broken Access Control",
      status: "reported",
      createdDate: "2025-01-18",
      lastModified: "2025-01-24",
      affectedHosts: ["api.techcorp.com"],
      description: "Users can access unauthorized resources by manipulating object references in API endpoints."
    },
    {
      id: 4,
      name: "Weak Password Policy",
      severity: "low",
      owaspCategory: "A07:2021 – Identification and Authentication Failures",
      status: "verified",
      createdDate: "2025-01-15",
      lastModified: "2025-01-23",
      affectedHosts: ["auth.techcorp.com"],
      description: "Password policy allows weak passwords that can be easily compromised through brute force attacks."
    },
    {
      id: 5,
      name: "Missing Security Headers",
      severity: "medium",
      owaspCategory: "A05:2021 – Security Misconfiguration",
      status: "draft",
      createdDate: "2025-01-21",
      lastModified: "2025-01-27",
      affectedHosts: ["www.techcorp.com", "blog.techcorp.com"],
      description: "Critical security headers are missing from HTTP responses, exposing the application to various attacks."
    }
  ];

  const severityOptions = [
    { value: '', label: 'All Severities' },
    { value: 'critical', label: 'Critical' },
    { value: 'high', label: 'High' },
    { value: 'medium', label: 'Medium' },
    { value: 'low', label: 'Low' }
  ];

  const statusOptions = [
    { value: '', label: 'All Statuses' },
    { value: 'draft', label: 'Draft' },
    { value: 'verified', label: 'Verified' },
    { value: 'reported', label: 'Reported' }
  ];

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'critical': return 'text-error bg-error/10 border-error/20';
      case 'high': return 'text-warning bg-warning/10 border-warning/20';
      case 'medium': return 'text-accent bg-accent/10 border-accent/20';
      case 'low': return 'text-success bg-success/10 border-success/20';
      default: return 'text-muted-foreground bg-muted border-border';
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'draft': return 'text-muted-foreground bg-muted';
      case 'verified': return 'text-success bg-success/10';
      case 'reported': return 'text-primary bg-primary/10';
      default: return 'text-muted-foreground bg-muted';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'draft': return 'Edit';
      case 'verified': return 'CheckCircle';
      case 'reported': return 'FileText';
      default: return 'Circle';
    }
  };

  const filteredVulnerabilities = useMemo(() => {
    return vulnerabilities.filter(vuln => {
      const matchesSearch = vuln.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           vuln.description.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesSeverity = !filterSeverity || vuln.severity === filterSeverity;
      const matchesStatus = !filterStatus || vuln.status === filterStatus;
      
      return matchesSearch && matchesSeverity && matchesStatus;
    });
  }, [searchTerm, filterSeverity, filterStatus]);

  return (
    <div className="h-full flex flex-col bg-card border-r border-border">
      {/* Header */}
      <div className="p-4 border-b border-border">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold text-foreground">Vulnerabilities</h2>
          <Button
            variant="default"
            size="sm"
            onClick={onCreateNew}
            iconName="Plus"
            iconPosition="left"
          >
            New
          </Button>
        </div>

        {/* Search */}
        <Input
          type="search"
          placeholder="Search vulnerabilities..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="mb-3"
        />

        {/* Filters */}
        <div className="space-y-2">
          <Select
            options={severityOptions}
            value={filterSeverity}
            onChange={setFilterSeverity}
            placeholder="Filter by severity"
          />
          <Select
            options={statusOptions}
            value={filterStatus}
            onChange={setFilterStatus}
            placeholder="Filter by status"
          />
        </div>
      </div>

      {/* Vulnerability List */}
      <div className="flex-1 overflow-y-auto">
        {filteredVulnerabilities.length === 0 ? (
          <div className="p-6 text-center">
            <Icon name="Search" size={48} className="text-muted-foreground mx-auto mb-3" />
            <p className="text-muted-foreground">No vulnerabilities found</p>
            <Button
              variant="outline"
              size="sm"
              onClick={onCreateNew}
              className="mt-3"
            >
              Create First Vulnerability
            </Button>
          </div>
        ) : (
          <div className="p-2 space-y-2">
            {filteredVulnerabilities.map((vulnerability) => (
              <div
                key={vulnerability.id}
                onClick={() => onSelectVulnerability(vulnerability)}
                className={`
                  p-3 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-sm
                  ${selectedVulnerability?.id === vulnerability.id 
                    ? 'border-primary bg-primary/5' :'border-border bg-background hover:border-primary/50'
                  }
                `}
              >
                <div className="space-y-2">
                  {/* Title and Severity */}
                  <div className="flex items-start justify-between">
                    <h3 className="font-medium text-foreground text-sm leading-tight">
                      {vulnerability.name}
                    </h3>
                    <span className={`
                      px-2 py-1 rounded text-xs font-medium border capitalize
                      ${getSeverityColor(vulnerability.severity)}
                    `}>
                      {vulnerability.severity}
                    </span>
                  </div>

                  {/* OWASP Category */}
                  <p className="text-xs text-muted-foreground">
                    {vulnerability.owaspCategory}
                  </p>

                  {/* Status and Date */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-1">
                      <Icon 
                        name={getStatusIcon(vulnerability.status)} 
                        size={12} 
                        className={getStatusColor(vulnerability.status).split(' ')[0]}
                      />
                      <span className={`
                        text-xs font-medium capitalize px-2 py-1 rounded
                        ${getStatusColor(vulnerability.status)}
                      `}>
                        {vulnerability.status}
                      </span>
                    </div>
                    <span className="text-xs text-muted-foreground">
                      {new Date(vulnerability.lastModified).toLocaleDateString()}
                    </span>
                  </div>

                  {/* Affected Hosts Count */}
                  <div className="flex items-center space-x-1">
                    <Icon name="Server" size={12} className="text-muted-foreground" />
                    <span className="text-xs text-muted-foreground">
                      {vulnerability.affectedHosts.length} host{vulnerability.affectedHosts.length !== 1 ? 's' : ''}
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Footer Stats */}
      <div className="p-4 border-t border-border bg-muted/30">
        <div className="text-center">
          <p className="text-sm text-muted-foreground">
            {filteredVulnerabilities.length} of {vulnerabilities.length} vulnerabilities
          </p>
          {currentProject && (
            <p className="text-xs text-muted-foreground mt-1">
              Project: {currentProject.name}
            </p>
          )}
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityList;