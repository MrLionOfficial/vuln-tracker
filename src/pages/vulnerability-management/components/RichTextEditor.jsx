import React, { useState, useRef } from 'react';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';

const RichTextEditor = ({ value = '', onChange, placeholder = 'Enter text...' }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [selectedText, setSelectedText] = useState('');
  const textareaRef = useRef(null);

  const formatText = (format) => {
    const textarea = textareaRef.current;
    if (!textarea) return;

    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selectedText = value.substring(start, end);
    
    if (selectedText) {
      let formattedText = '';
      
      switch (format) {
        case 'bold':
          formattedText = `**${selectedText}**`;
          break;
        case 'italic':
          formattedText = `*${selectedText}*`;
          break;
        case 'code':
          formattedText = `\`${selectedText}\``;
          break;
        case 'link':
          const url = prompt('Enter URL:');
          if (url) {
            formattedText = `[${selectedText}](${url})`;
          } else {
            return;
          }
          break;
        default:
          return;
      }

      const newValue = value.substring(0, start) + formattedText + value.substring(end);
      onChange(newValue);
      
      // Restore cursor position
      setTimeout(() => {
        textarea.focus();
        textarea.setSelectionRange(start + formattedText.length, start + formattedText.length);
      }, 0);
    }
  };

  const insertList = (type) => {
    const textarea = textareaRef.current;
    if (!textarea) return;

    const start = textarea.selectionStart;
    const lines = value.split('\n');
    const currentLineIndex = value.substring(0, start).split('\n').length - 1;
    
    const listItem = type === 'bullet' ? 'â€¢ ' : '1. ';
    const newLine = listItem + 'List item';
    
    lines.splice(currentLineIndex + 1, 0, newLine);
    const newValue = lines.join('\n');
    onChange(newValue);
    
    setTimeout(() => {
      textarea.focus();
      const newPosition = start + newLine.length + 1;
      textarea.setSelectionRange(newPosition, newPosition);
    }, 0);
  };

  const insertTemplate = (template) => {
    const templates = {
      vulnerability: `## Vulnerability Overview
**Severity:** [Critical/High/Medium/Low]
**OWASP Category:** [A01-A10]

## Description
[Detailed description of the vulnerability]

## Impact
[Potential impact and risks]

## Remediation
[Steps to fix the vulnerability]`,
      
      methodology: `## Testing Approach
1. **Reconnaissance**
   - Information gathering
   - Target identification

2. **Vulnerability Assessment**
   - Automated scanning
   - Manual testing

3. **Exploitation**
   - Proof of concept
   - Impact validation

4. **Documentation**
   - Evidence collection
   - Report generation`,
   
      recommendation: `## Immediate Actions
1. [Priority 1 action]
2. [Priority 2 action]

## Long-term Recommendations
- [Strategic recommendation 1]
- [Strategic recommendation 2]

## Best Practices
- [Best practice 1]
- [Best practice 2]`
    };

    const template_text = templates[template] || '';
    const textarea = textareaRef.current;
    if (!textarea) return;

    const start = textarea.selectionStart;
    const newValue = value.substring(0, start) + template_text + value.substring(start);
    onChange(newValue);
    
    setTimeout(() => {
      textarea.focus();
      textarea.setSelectionRange(start + template_text.length, start + template_text.length);
    }, 0);
  };

  const handleTextSelection = () => {
    const textarea = textareaRef.current;
    if (!textarea) return;

    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selected = value.substring(start, end);
    setSelectedText(selected);
  };

  return (
    <div className="border border-border rounded-lg bg-card">
      {/* Toolbar */}
      <div className="border-b border-border p-3">
        <div className="flex flex-wrap items-center gap-2">
          {/* Text Formatting */}
          <div className="flex items-center space-x-1">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => formatText('bold')}
              disabled={!selectedText}
              title="Bold (Ctrl+B)"
            >
              <Icon name="Bold" size={16} />
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => formatText('italic')}
              disabled={!selectedText}
              title="Italic (Ctrl+I)"
            >
              <Icon name="Italic" size={16} />
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => formatText('code')}
              disabled={!selectedText}
              title="Code"
            >
              <Icon name="Code" size={16} />
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => formatText('link')}
              disabled={!selectedText}
              title="Link"
            >
              <Icon name="Link" size={16} />
            </Button>
          </div>

          <div className="w-px h-6 bg-border" />

          {/* Lists */}
          <div className="flex items-center space-x-1">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => insertList('bullet')}
              title="Bullet List"
            >
              <Icon name="List" size={16} />
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => insertList('numbered')}
              title="Numbered List"
            >
              <Icon name="ListOrdered" size={16} />
            </Button>
          </div>

          <div className="w-px h-6 bg-border" />

          {/* Templates */}
          <div className="flex items-center space-x-1">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => insertTemplate('vulnerability')}
              title="Vulnerability Template"
            >
              <Icon name="FileText" size={16} />
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => insertTemplate('methodology')}
              title="Methodology Template"
            >
              <Icon name="BookOpen" size={16} />
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => insertTemplate('recommendation')}
              title="Recommendation Template"
            >
              <Icon name="Shield" size={16} />
            </Button>
          </div>

          <div className="w-px h-6 bg-border" />

          {/* View Toggle */}
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsExpanded(!isExpanded)}
            title={isExpanded ? "Collapse" : "Expand"}
          >
            <Icon name={isExpanded ? "Minimize2" : "Maximize2"} size={16} />
          </Button>
        </div>

        {/* Selection Info */}
        {selectedText && (
          <div className="mt-2 text-xs text-muted-foreground">
            {selectedText.length} characters selected
          </div>
        )}
      </div>

      {/* Editor */}
      <div className="relative">
        <textarea
          ref={textareaRef}
          value={value}
          onChange={(e) => onChange(e.target.value)}
          onSelect={handleTextSelection}
          placeholder={placeholder}
          className={`
            w-full p-4 bg-input text-foreground placeholder:text-muted-foreground 
            focus:outline-none resize-none border-0 rounded-b-lg
            ${isExpanded ? 'h-96' : 'h-48'}
          `}
          style={{ fontFamily: 'JetBrains Mono, monospace', fontSize: '14px', lineHeight: '1.5' }}
        />

        {/* Character Count */}
        <div className="absolute bottom-3 right-3 text-xs text-muted-foreground bg-background/80 px-2 py-1 rounded">
          {value.length} characters
        </div>
      </div>

      {/* Preview Toggle */}
      <div className="border-t border-border p-3">
        <div className="flex items-center justify-between">
          <div className="text-sm text-muted-foreground">
            Supports Markdown formatting
          </div>
          <div className="flex items-center space-x-2">
            <Icon name="Info" size={14} className="text-muted-foreground" />
            <span className="text-xs text-muted-foreground">
              **bold** *italic* `code` [link](url)
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RichTextEditor;