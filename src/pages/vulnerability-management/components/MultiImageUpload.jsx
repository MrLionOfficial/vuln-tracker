import React, { useState, useRef } from 'react';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';
import Image from '../../../components/AppImage';

const MultiImageUpload = ({ images = [], onChange, maxImages = 10 }) => {
  const [dragOver, setDragOver] = useState(false);
  const [uploading, setUploading] = useState(false);
  const fileInputRef = useRef(null);

  const handleFileSelect = (files) => {
    const fileArray = Array.from(files);
    const validFiles = fileArray.filter(file => 
      file.type.startsWith('image/') && file.size <= 10 * 1024 * 1024 // 10MB limit
    );

    if (images.length + validFiles.length > maxImages) {
      alert(`Maximum ${maxImages} images allowed`);
      return;
    }

    setUploading(true);
    
    // Simulate file upload process
    const newImages = validFiles.map((file, index) => ({
      id: Date.now() + index,
      file,
      url: URL.createObjectURL(file),
      name: file.name,
      size: file.size,
      uploaded: false
    }));

    // Simulate upload delay
    setTimeout(() => {
      const uploadedImages = newImages.map(img => ({ ...img, uploaded: true }));
      onChange([...images, ...uploadedImages]);
      setUploading(false);
    }, 1000);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setDragOver(false);
    const files = e.dataTransfer.files;
    handleFileSelect(files);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    setDragOver(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setDragOver(false);
  };

  const handleFileInputChange = (e) => {
    const files = e.target.files;
    if (files) {
      handleFileSelect(files);
    }
  };

  const removeImage = (imageId) => {
    const updatedImages = images.filter(img => img.id !== imageId);
    onChange(updatedImages);
  };

  const moveImage = (fromIndex, toIndex) => {
    const updatedImages = [...images];
    const [movedImage] = updatedImages.splice(fromIndex, 1);
    updatedImages.splice(toIndex, 0, movedImage);
    onChange(updatedImages);
  };

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  return (
    <div className="space-y-4">
      {/* Upload Area */}
      <div
        className={`
          border-2 border-dashed rounded-lg p-6 text-center transition-all duration-200 cursor-pointer
          ${dragOver 
            ? 'border-primary bg-primary/5' :'border-border hover:border-primary/50 hover:bg-muted/50'
          }
          ${uploading ? 'pointer-events-none opacity-50' : ''}
        `}
        onDrop={handleDrop}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onClick={() => fileInputRef.current?.click()}
      >
        <input
          ref={fileInputRef}
          type="file"
          multiple
          accept="image/*"
          onChange={handleFileInputChange}
          className="hidden"
        />

        <div className="space-y-3">
          <Icon 
            name={uploading ? "Loader2" : "Upload"} 
            size={48} 
            className={`mx-auto text-muted-foreground ${uploading ? 'animate-spin' : ''}`} 
          />
          
          <div>
            <p className="text-foreground font-medium">
              {uploading ? 'Uploading images...' : 'Drop images here or click to browse'}
            </p>
            <p className="text-sm text-muted-foreground mt-1">
              PNG, JPG, GIF up to 10MB each â€¢ Max {maxImages} images
            </p>
          </div>

          {!uploading && (
            <Button variant="outline" size="sm">
              <Icon name="Plus" size={16} className="mr-2" />
              Add Images
            </Button>
          )}
        </div>
      </div>

      {/* Image Grid */}
      {images.length > 0 && (
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <h4 className="font-medium text-foreground">
              Uploaded Images ({images.length}/{maxImages})
            </h4>
            {images.length > 1 && (
              <p className="text-sm text-muted-foreground">
                Drag to reorder
              </p>
            )}
          </div>

          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {images.map((image, index) => (
              <div
                key={image.id}
                className="relative group border border-border rounded-lg overflow-hidden bg-card"
                draggable
                onDragStart={(e) => {
                  e.dataTransfer.setData('text/plain', index.toString());
                }}
                onDragOver={(e) => e.preventDefault()}
                onDrop={(e) => {
                  e.preventDefault();
                  const fromIndex = parseInt(e.dataTransfer.getData('text/plain'));
                  if (fromIndex !== index) {
                    moveImage(fromIndex, index);
                  }
                }}
              >
                {/* Image Preview */}
                <div className="aspect-video relative overflow-hidden">
                  <Image
                    src={image.url}
                    alt={image.name}
                    className="w-full h-full object-cover"
                  />
                  
                  {/* Upload Status Overlay */}
                  {!image.uploaded && (
                    <div className="absolute inset-0 bg-black/50 flex items-center justify-center">
                      <Icon name="Loader2" size={24} className="text-white animate-spin" />
                    </div>
                  )}

                  {/* Action Buttons */}
                  <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                    <div className="flex space-x-1">
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          window.open(image.url, '_blank');
                        }}
                        className="p-1.5 bg-black/70 text-white rounded-lg hover:bg-black/80 transition-colors"
                      >
                        <Icon name="Eye" size={14} />
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          removeImage(image.id);
                        }}
                        className="p-1.5 bg-error/80 text-white rounded-lg hover:bg-error transition-colors"
                      >
                        <Icon name="Trash2" size={14} />
                      </button>
                    </div>
                  </div>

                  {/* Drag Handle */}
                  {images.length > 1 && (
                    <div className="absolute top-2 left-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                      <div className="p-1.5 bg-black/70 text-white rounded-lg cursor-move">
                        <Icon name="GripVertical" size={14} />
                      </div>
                    </div>
                  )}
                </div>

                {/* Image Info */}
                <div className="p-3">
                  <p className="text-sm font-medium text-foreground truncate" title={image.name}>
                    {image.name}
                  </p>
                  <div className="flex items-center justify-between mt-1">
                    <span className="text-xs text-muted-foreground">
                      {formatFileSize(image.size)}
                    </span>
                    <div className="flex items-center space-x-1">
                      {image.uploaded ? (
                        <Icon name="CheckCircle" size={14} className="text-success" />
                      ) : (
                        <Icon name="Clock" size={14} className="text-warning" />
                      )}
                      <span className="text-xs text-muted-foreground">
                        Step {index + 1}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Upload Progress */}
      {uploading && (
        <div className="bg-muted rounded-lg p-3">
          <div className="flex items-center space-x-3">
            <Icon name="Loader2" size={16} className="text-primary animate-spin" />
            <div className="flex-1">
              <p className="text-sm font-medium text-foreground">Uploading images...</p>
              <div className="w-full bg-background rounded-full h-2 mt-1">
                <div className="bg-primary h-2 rounded-full animate-pulse" style={{ width: '60%' }} />
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MultiImageUpload;