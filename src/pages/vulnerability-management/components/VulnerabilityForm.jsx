import React, { useState, useEffect } from 'react';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';
import Input from '../../../components/ui/Input';
import Select from '../../../components/ui/Select';

import MultiImageUpload from './MultiImageUpload';
import RichTextEditor from './RichTextEditor';

const VulnerabilityForm = ({ vulnerability, onSave, onDelete, onDuplicate }) => {
  const [formData, setFormData] = useState({
    name: '',
    severity: '',
    owaspCategory: '',
    status: 'draft',
    description: '',
    threatDescription: '',
    methodology: '',
    reproductionSteps: [{ step: 1, description: '', images: [] }],
    impactAnalysis: '',
    affectedHosts: [''],
    recommendations: '',
    references: '',
    cvssScore: '',
    cweId: '',
    tags: []
  });

  const [activeSection, setActiveSection] = useState('basic');
  const [isLoading, setIsLoading] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);

  useEffect(() => {
    if (vulnerability) {
      setFormData({
        name: vulnerability.name || '',
        severity: vulnerability.severity || '',
        owaspCategory: vulnerability.owaspCategory || '',
        status: vulnerability.status || 'draft',
        description: vulnerability.description || '',
        threatDescription: vulnerability.threatDescription || '',
        methodology: vulnerability.methodology || '',
        reproductionSteps: vulnerability.reproductionSteps || [{ step: 1, description: '', images: [] }],
        impactAnalysis: vulnerability.impactAnalysis || '',
        affectedHosts: vulnerability.affectedHosts || [''],
        recommendations: vulnerability.recommendations || '',
        references: vulnerability.references || '',
        cvssScore: vulnerability.cvssScore || '',
        cweId: vulnerability.cweId || '',
        tags: vulnerability.tags || []
      });
    }
  }, [vulnerability]);

  const severityOptions = [
    { value: 'critical', label: 'Critical' },
    { value: 'high', label: 'High' },
    { value: 'medium', label: 'Medium' },
    { value: 'low', label: 'Low' }
  ];

  const owaspOptions = [
    { value: 'A01:2021 – Broken Access Control', label: 'A01:2021 – Broken Access Control' },
    { value: 'A02:2021 – Cryptographic Failures', label: 'A02:2021 – Cryptographic Failures' },
    { value: 'A03:2021 – Injection', label: 'A03:2021 – Injection' },
    { value: 'A04:2021 – Insecure Design', label: 'A04:2021 – Insecure Design' },
    { value: 'A05:2021 – Security Misconfiguration', label: 'A05:2021 – Security Misconfiguration' },
    { value: 'A06:2021 – Vulnerable and Outdated Components', label: 'A06:2021 – Vulnerable and Outdated Components' },
    { value: 'A07:2021 – Identification and Authentication Failures', label: 'A07:2021 – Identification and Authentication Failures' },
    { value: 'A08:2021 – Software and Data Integrity Failures', label: 'A08:2021 – Software and Data Integrity Failures' },
    { value: 'A09:2021 – Security Logging and Monitoring Failures', label: 'A09:2021 – Security Logging and Monitoring Failures' },
    { value: 'A10:2021 – Server-Side Request Forgery', label: 'A10:2021 – Server-Side Request Forgery' }
  ];

  const statusOptions = [
    { value: 'draft', label: 'Draft' },
    { value: 'verified', label: 'Verified' },
    { value: 'reported', label: 'Reported' }
  ];

  const sections = [
    { id: 'basic', label: 'Basic Information', icon: 'Info' },
    { id: 'threat', label: 'Threat Description', icon: 'AlertTriangle' },
    { id: 'methodology', label: 'Methodology', icon: 'BookOpen' },
    { id: 'reproduction', label: 'Reproduction Steps', icon: 'List' },
    { id: 'impact', label: 'Impact Analysis', icon: 'Target' },
    { id: 'hosts', label: 'Affected Hosts', icon: 'Server' },
    { id: 'recommendations', label: 'Recommendations', icon: 'Shield' },
    { id: 'references', label: 'References', icon: 'Link' }
  ];

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleHostChange = (index, value) => {
    const newHosts = [...formData.affectedHosts];
    newHosts[index] = value;
    setFormData(prev => ({
      ...prev,
      affectedHosts: newHosts
    }));
  };

  const addHost = () => {
    setFormData(prev => ({
      ...prev,
      affectedHosts: [...prev.affectedHosts, '']
    }));
  };

  const removeHost = (index) => {
    if (formData.affectedHosts.length > 1) {
      const newHosts = formData.affectedHosts.filter((_, i) => i !== index);
      setFormData(prev => ({
        ...prev,
        affectedHosts: newHosts
      }));
    }
  };

  const handleStepChange = (index, field, value) => {
    const newSteps = [...formData.reproductionSteps];
    newSteps[index] = { ...newSteps[index], [field]: value };
    setFormData(prev => ({
      ...prev,
      reproductionSteps: newSteps
    }));
  };

  const addReproductionStep = () => {
    setFormData(prev => ({
      ...prev,
      reproductionSteps: [
        ...prev.reproductionSteps,
        { step: prev.reproductionSteps.length + 1, description: '', images: [] }
      ]
    }));
  };

  const removeReproductionStep = (index) => {
    if (formData.reproductionSteps.length > 1) {
      const newSteps = formData.reproductionSteps
        .filter((_, i) => i !== index)
        .map((step, i) => ({ ...step, step: i + 1 }));
      setFormData(prev => ({
        ...prev,
        reproductionSteps: newSteps
      }));
    }
  };

  const handleSave = async (status = formData.status) => {
    setIsLoading(true);
    try {
      const dataToSave = { ...formData, status };
      await onSave(dataToSave);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelete = async () => {
    if (vulnerability?.id) {
      setIsLoading(true);
      try {
        await onDelete(vulnerability.id);
        setShowDeleteConfirm(false);
      } finally {
        setIsLoading(false);
      }
    }
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'critical': return 'text-error';
      case 'high': return 'text-warning';
      case 'medium': return 'text-accent';
      case 'low': return 'text-success';
      default: return 'text-muted-foreground';
    }
  };

  if (!vulnerability && !formData.name) {
    return (
      <div className="h-full flex items-center justify-center bg-background">
        <div className="text-center">
          <Icon name="FileText" size={64} className="text-muted-foreground mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-foreground mb-2">No Vulnerability Selected</h3>
          <p className="text-muted-foreground mb-4">Select a vulnerability from the list or create a new one to get started.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-full flex flex-col bg-background">
      {/* Header */}
      <div className="p-6 border-b border-border bg-card">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3">
            <h1 className="text-xl font-semibold text-foreground">
              {vulnerability ? 'Edit Vulnerability' : 'New Vulnerability'}
            </h1>
            {formData.severity && (
              <span className={`
                px-3 py-1 rounded-full text-sm font-medium capitalize
                ${getSeverityColor(formData.severity)} bg-current/10
              `}>
                {formData.severity}
              </span>
            )}
          </div>
          
          <div className="flex items-center space-x-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleSave('draft')}
              loading={isLoading}
              iconName="Save"
              iconPosition="left"
            >
              Save Draft
            </Button>
            <Button
              variant="default"
              size="sm"
              onClick={() => handleSave('verified')}
              loading={isLoading}
              iconName="CheckCircle"
              iconPosition="left"
            >
              Publish Finding
            </Button>
            {vulnerability && (
              <>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => onDuplicate(vulnerability)}
                  iconName="Copy"
                  iconPosition="left"
                >
                  Duplicate
                </Button>
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={() => setShowDeleteConfirm(true)}
                  iconName="Trash2"
                  iconPosition="left"
                >
                  Delete
                </Button>
              </>
            )}
          </div>
        </div>

        {/* Section Navigation */}
        <div className="flex space-x-1 overflow-x-auto">
          {sections.map((section) => (
            <button
              key={section.id}
              onClick={() => setActiveSection(section.id)}
              className={`
                flex items-center space-x-2 px-3 py-2 rounded-lg text-sm font-medium whitespace-nowrap transition-all duration-200
                ${activeSection === section.id
                  ? 'bg-primary text-primary-foreground'
                  : 'text-muted-foreground hover:text-foreground hover:bg-muted'
                }
              `}
            >
              <Icon name={section.icon} size={16} />
              <span>{section.label}</span>
            </button>
          ))}
        </div>
      </div>

      {/* Form Content */}
      <div className="flex-1 overflow-y-auto p-6">
        <div className="max-w-4xl mx-auto space-y-6">
          {/* Basic Information */}
          {activeSection === 'basic' && (
            <div className="space-y-4">
              <h2 className="text-lg font-semibold text-foreground">Basic Information</h2>
              
              <Input
                label="Vulnerability Name"
                type="text"
                placeholder="Enter vulnerability name"
                value={formData.name}
                onChange={(e) => handleInputChange('name', e.target.value)}
                required
              />

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Select
                  label="Severity Level"
                  options={severityOptions}
                  value={formData.severity}
                  onChange={(value) => handleInputChange('severity', value)}
                  required
                />

                <Select
                  label="OWASP Category"
                  options={owaspOptions}
                  value={formData.owaspCategory}
                  onChange={(value) => handleInputChange('owaspCategory', value)}
                  searchable
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <Select
                  label="Status"
                  options={statusOptions}
                  value={formData.status}
                  onChange={(value) => handleInputChange('status', value)}
                />

                <Input
                  label="CVSS Score"
                  type="number"
                  placeholder="0.0 - 10.0"
                  value={formData.cvssScore}
                  onChange={(e) => handleInputChange('cvssScore', e.target.value)}
                  min="0"
                  max="10"
                  step="0.1"
                />

                <Input
                  label="CWE ID"
                  type="text"
                  placeholder="CWE-XXX"
                  value={formData.cweId}
                  onChange={(e) => handleInputChange('cweId', e.target.value)}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-foreground mb-2">
                  Brief Description
                </label>
                <textarea
                  className="w-full p-3 border border-border rounded-lg bg-input text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent resize-none"
                  rows={3}
                  placeholder="Brief description of the vulnerability"
                  value={formData.description}
                  onChange={(e) => handleInputChange('description', e.target.value)}
                />
              </div>
            </div>
          )}

          {/* Threat Description */}
          {activeSection === 'threat' && (
            <div className="space-y-4">
              <h2 className="text-lg font-semibold text-foreground">Threat Description</h2>
              <RichTextEditor
                value={formData.threatDescription}
                onChange={(value) => handleInputChange('threatDescription', value)}
                placeholder="Detailed threat description including attack vectors, potential exploitation methods, and security implications..."
              />
            </div>
          )}

          {/* Methodology */}
          {activeSection === 'methodology' && (
            <div className="space-y-4">
              <h2 className="text-lg font-semibold text-foreground">Testing Methodology</h2>
              <RichTextEditor
                value={formData.methodology}
                onChange={(value) => handleInputChange('methodology', value)}
                placeholder="Describe the testing methodology used to identify this vulnerability, including tools, techniques, and approaches..."
              />
            </div>
          )}

          {/* Reproduction Steps */}
          {activeSection === 'reproduction' && (
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h2 className="text-lg font-semibold text-foreground">Reproduction Steps</h2>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={addReproductionStep}
                  iconName="Plus"
                  iconPosition="left"
                >
                  Add Step
                </Button>
              </div>

              <div className="space-y-4">
                {formData.reproductionSteps.map((step, index) => (
                  <div key={index} className="border border-border rounded-lg p-4 bg-card">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="font-medium text-foreground">Step {step.step}</h3>
                      {formData.reproductionSteps.length > 1 && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => removeReproductionStep(index)}
                          iconName="Trash2"
                        />
                      )}
                    </div>

                    <div className="space-y-3">
                      <textarea
                        className="w-full p-3 border border-border rounded-lg bg-input text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent resize-none"
                        rows={3}
                        placeholder={`Describe step ${step.step} in detail...`}
                        value={step.description}
                        onChange={(e) => handleStepChange(index, 'description', e.target.value)}
                      />

                      <MultiImageUpload
                        images={step.images || []}
                        onChange={(images) => handleStepChange(index, 'images', images)}
                        maxImages={5}
                      />
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Impact Analysis */}
          {activeSection === 'impact' && (
            <div className="space-y-4">
              <h2 className="text-lg font-semibold text-foreground">Impact Analysis</h2>
              <RichTextEditor
                value={formData.impactAnalysis}
                onChange={(value) => handleInputChange('impactAnalysis', value)}
                placeholder="Analyze the potential impact of this vulnerability including business impact, data exposure risks, compliance implications..."
              />
            </div>
          )}

          {/* Affected Hosts */}
          {activeSection === 'hosts' && (
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h2 className="text-lg font-semibold text-foreground">Affected Hosts</h2>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={addHost}
                  iconName="Plus"
                  iconPosition="left"
                >
                  Add Host
                </Button>
              </div>

              <div className="space-y-3">
                {formData.affectedHosts.map((host, index) => (
                  <div key={index} className="flex items-center space-x-2">
                    <Input
                      type="text"
                      placeholder="hostname.domain.com or IP address"
                      value={host}
                      onChange={(e) => handleHostChange(index, e.target.value)}
                      className="flex-1"
                    />
                    {formData.affectedHosts.length > 1 && (
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => removeHost(index)}
                        iconName="Trash2"
                      />
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Recommendations */}
          {activeSection === 'recommendations' && (
            <div className="space-y-4">
              <h2 className="text-lg font-semibold text-foreground">Remediation Recommendations</h2>
              <RichTextEditor
                value={formData.recommendations}
                onChange={(value) => handleInputChange('recommendations', value)}
                placeholder="Provide detailed remediation steps, best practices, and security recommendations to fix this vulnerability..."
              />
            </div>
          )}

          {/* References */}
          {activeSection === 'references' && (
            <div className="space-y-4">
              <h2 className="text-lg font-semibold text-foreground">References</h2>
              <textarea
                className="w-full p-3 border border-border rounded-lg bg-input text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent resize-none"
                rows={6}
                placeholder={`Add references, links, and citations:\n\n• OWASP Testing Guide: https://...\n• CVE Details: https://...\n• Security Advisory: https://...`}
                value={formData.references}
                onChange={(e) => handleInputChange('references', e.target.value)}
              />
            </div>
          )}
        </div>
      </div>

      {/* Delete Confirmation Modal */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-card border border-border rounded-lg p-6 max-w-md mx-4">
            <div className="flex items-center space-x-3 mb-4">
              <Icon name="AlertTriangle" size={24} className="text-error" />
              <h3 className="text-lg font-semibold text-foreground">Delete Vulnerability</h3>
            </div>
            <p className="text-muted-foreground mb-6">
              Are you sure you want to delete this vulnerability? This action cannot be undone.
            </p>
            <div className="flex justify-end space-x-3">
              <Button
                variant="outline"
                onClick={() => setShowDeleteConfirm(false)}
              >
                Cancel
              </Button>
              <Button
                variant="destructive"
                onClick={handleDelete}
                loading={isLoading}
              >
                Delete
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityForm;