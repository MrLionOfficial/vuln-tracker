import React, { useState, useEffect } from 'react';
import { useProject } from '../../components/ui/ProjectContextProvider';
import Header from '../../components/ui/Header';
import NavigationBreadcrumbs from '../../components/ui/NavigationBreadcrumbs';
import QuickActionToolbar from '../../components/ui/QuickActionToolbar';
import StatusIndicatorSystem from '../../components/ui/StatusIndicatorSystem';
import VulnerabilityList from './components/VulnerabilityList';
import VulnerabilityForm from './components/VulnerabilityForm';

const VulnerabilityManagement = () => {
  const { currentProject } = useProject();
  const [selectedVulnerability, setSelectedVulnerability] = useState(null);
  const [isCreatingNew, setIsCreatingNew] = useState(false);
  const [isMobileView, setIsMobileView] = useState(false);
  const [showMobileList, setShowMobileList] = useState(true);

  useEffect(() => {
    const handleResize = () => {
      setIsMobileView(window.innerWidth < 768);
    };

    handleResize();
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const handleSelectVulnerability = (vulnerability) => {
    setSelectedVulnerability(vulnerability);
    setIsCreatingNew(false);
    if (isMobileView) {
      setShowMobileList(false);
    }
  };

  const handleCreateNew = () => {
    setSelectedVulnerability(null);
    setIsCreatingNew(true);
    if (isMobileView) {
      setShowMobileList(false);
    }
  };

  const handleSave = async (vulnerabilityData) => {
    // Mock save functionality
    console.log('Saving vulnerability:', vulnerabilityData);
    
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // In a real app, this would update the vulnerability list
    if (isCreatingNew) {
      const newVulnerability = {
        id: Date.now(),
        ...vulnerabilityData,
        createdDate: new Date().toISOString().split('T')[0],
        lastModified: new Date().toISOString().split('T')[0]
      };
      setSelectedVulnerability(newVulnerability);
      setIsCreatingNew(false);
    } else {
      setSelectedVulnerability(prev => ({
        ...prev,
        ...vulnerabilityData,
        lastModified: new Date().toISOString().split('T')[0]
      }));
    }
  };

  const handleDelete = async (vulnerabilityId) => {
    // Mock delete functionality
    console.log('Deleting vulnerability:', vulnerabilityId);
    
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 500));
    
    setSelectedVulnerability(null);
    setIsCreatingNew(false);
    if (isMobileView) {
      setShowMobileList(true);
    }
  };

  const handleDuplicate = (vulnerability) => {
    const duplicatedVulnerability = {
      ...vulnerability,
      id: Date.now(),
      name: `${vulnerability.name} (Copy)`,
      status: 'draft',
      createdDate: new Date().toISOString().split('T')[0],
      lastModified: new Date().toISOString().split('T')[0]
    };
    setSelectedVulnerability(duplicatedVulnerability);
    setIsCreatingNew(true);
  };

  const handleBackToList = () => {
    setShowMobileList(true);
    setSelectedVulnerability(null);
    setIsCreatingNew(false);
  };

  if (!currentProject) {
    return (
      <div className="min-h-screen bg-background">
        <Header />
        <NavigationBreadcrumbs />
        
        <div className="pt-32 pb-8 px-8">
          <div className="max-w-4xl mx-auto text-center">
            <div className="bg-card border border-border rounded-lg p-8">
              <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-2xl">ðŸ”’</span>
              </div>
              <h2 className="text-xl font-semibold text-foreground mb-2">No Project Selected</h2>
              <p className="text-muted-foreground mb-6">
                Please select a project from the dashboard to manage vulnerabilities.
              </p>
              <button
                onClick={() => window.history.back()}
                className="px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors"
              >
                Go Back to Dashboard
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      <Header />
      <NavigationBreadcrumbs />
      
      <div className="pt-32 pb-8">
        {/* Desktop Layout */}
        {!isMobileView && (
          <div className="h-[calc(100vh-8rem)] flex">
            {/* Vulnerability List - Left Panel */}
            <div className="w-1/3 min-w-[400px] max-w-[500px]">
              <VulnerabilityList
                selectedVulnerability={selectedVulnerability}
                onSelectVulnerability={handleSelectVulnerability}
                onCreateNew={handleCreateNew}
              />
            </div>

            {/* Vulnerability Form - Main Area */}
            <div className="flex-1">
              <VulnerabilityForm
                vulnerability={selectedVulnerability}
                onSave={handleSave}
                onDelete={handleDelete}
                onDuplicate={handleDuplicate}
              />
            </div>
          </div>
        )}

        {/* Mobile Layout */}
        {isMobileView && (
          <div className="h-[calc(100vh-8rem)]">
            {showMobileList ? (
              <div className="h-full">
                <VulnerabilityList
                  selectedVulnerability={selectedVulnerability}
                  onSelectVulnerability={handleSelectVulnerability}
                  onCreateNew={handleCreateNew}
                />
              </div>
            ) : (
              <div className="h-full">
                {/* Mobile Back Button */}
                <div className="p-4 border-b border-border bg-card">
                  <button
                    onClick={handleBackToList}
                    className="flex items-center space-x-2 text-muted-foreground hover:text-foreground transition-colors"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                    </svg>
                    <span>Back to List</span>
                  </button>
                </div>

                <VulnerabilityForm
                  vulnerability={selectedVulnerability}
                  onSave={handleSave}
                  onDelete={handleDelete}
                  onDuplicate={handleDuplicate}
                />
              </div>
            )}
          </div>
        )}

        {/* Quick Actions */}
        <div className="fixed bottom-6 left-6 z-40">
          <QuickActionToolbar />
        </div>

        {/* Status Indicator */}
        <div className="fixed top-20 right-6 z-30">
          <StatusIndicatorSystem compact={true} showDetails={false} />
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityManagement;